diff --git a/pom.xml b/pom.xml
index 132ae61..b1bdeec 100644
--- a/pom.xml
+++ b/pom.xml
@@ -137,6 +137,13 @@
             <artifactId>jaxb-core</artifactId>
             <version>${jaxb.core.version}</version>
         </dependency>
+
+        <dependency>
+            <groupId>com.github.vladimir-bukhtoyarov</groupId>
+            <artifactId>bucket4j-core</artifactId>
+            <version>7.0.0</version>
+        </dependency>
+
     </dependencies>
 
     <build>
diff --git a/src/main/java/com/sforce/gymbuddy/controller/UserController.java b/src/main/java/com/sforce/gymbuddy/controller/UserController.java
index c23b04b..df27671 100644
--- a/src/main/java/com/sforce/gymbuddy/controller/UserController.java
+++ b/src/main/java/com/sforce/gymbuddy/controller/UserController.java
@@ -93,6 +93,24 @@ public class UserController {
         }
     }
 
+    /**
+     * Retrieves a user by their username.
+     *
+     * @param username the username of the user to retrieve
+     * @return a ResponseEntity containing the user or a not found status if the
+     *         user is not found
+     */
+    @GetMapping("/getUser")
+    public ResponseEntity<Object> getUserByUsername(@RequestParam String username) {
+        Optional<User> userOptional = userService.getUserByUsername(username);
+        if (userOptional.isPresent()) {
+            return ResponseEntity.ok(userService.convertToDTO(userOptional.get()));
+        } else {
+            return ResponseEntity.status(HttpStatus.NOT_FOUND)
+                    .body("User not found with username: " + username);
+        }
+    }
+
     /**
      * Registers a new user.
      *
diff --git a/src/main/java/com/sforce/gymbuddy/service/UserService.java b/src/main/java/com/sforce/gymbuddy/service/UserService.java
index 8ede478..0e4ec93 100644
--- a/src/main/java/com/sforce/gymbuddy/service/UserService.java
+++ b/src/main/java/com/sforce/gymbuddy/service/UserService.java
@@ -6,10 +6,14 @@ import com.sforce.gymbuddy.repository.UserRepository;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
 import org.springframework.security.core.userdetails.User.UserBuilder;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestParam;
 
 import java.util.List;
 import java.util.Optional;
@@ -78,6 +82,16 @@ public class UserService {
         return userRepository.findByEmail(email.trim().toLowerCase());
     }
 
+    /**
+     * Retrieves a user by username.
+     *
+     * @param username the username of the user
+     * @return an optional containing the user if found, or empty if not found
+     */
+    public Optional<User> getUserByUsername(String username) {
+        return userRepository.findByUsername(username);
+    }
+
     /**
      * Saves a new user or updates an existing user.
      *
@@ -253,4 +267,5 @@ public class UserService {
         builder.roles("USER"); // Customize roles as needed
         return builder.build();
     }
+
 }
diff --git a/src/test/java/com/sforce/gymbuddy/UserIntegrationTest.java b/src/test/java/com/sforce/gymbuddy/UserIntegrationTest.java
index 5ac0ebb..6ba5ab0 100644
--- a/src/test/java/com/sforce/gymbuddy/UserIntegrationTest.java
+++ b/src/test/java/com/sforce/gymbuddy/UserIntegrationTest.java
@@ -201,6 +201,22 @@ public class UserIntegrationTest {
                                 .andExpect(content().string("Email should be valid"));
         }
 
+        @Test
+        public void testGetUserByUsername() throws Exception {
+                mockMvc.perform(get("/api/users/getUser")
+                                .param("username", "testuser")
+                                .header("Authorization", "Bearer " + jwtToken))
+                                .andExpect(status().isOk())
+                                .andExpect(jsonPath("$.username", is("testuser")));
+
+                // Test user not found
+                mockMvc.perform(get("/api/users/getUser")
+                                .param("username", "nonexistentuser")
+                                .header("Authorization", "Bearer " + jwtToken))
+                                .andExpect(status().isNotFound())
+                                .andExpect(content().string("User not found with username: nonexistentuser"));
+        }
+
         @Test
         public void testUpdateUser() throws Exception {
                 User user = userRepository.findByUsername("testuser").orElseThrow();
